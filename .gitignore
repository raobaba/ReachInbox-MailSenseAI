node_modules
.env







async function getUser(req: Request, res: Response): Promise<void> {
    try {
        const email = req.params.email as string;
        if (!email) {
            throw new Error("Email address is missing");
        }
        
        const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/profile`;
        const accessToken = await oAuth2Client.getAccessToken();
        if (!accessToken) {
            throw new Error("Access token is null or undefined");
        }
        const token = accessToken.token as string;
        const config: AxiosRequestConfig = createConfig(url, token);
        const response: AxiosResponse = await axios(config);
        res.json(response.data);
    }
    catch (error) {
        console.log(error);
        res.send(error);
    }
}

async function readMail(req: Request, res: Response): Promise<void> {
    try {
        const email = req.params.email as string;
        const messageId = req.params.messageId as string;
        
        if (!email || !messageId) {
            throw new Error("Email address or message ID is missing");
        }
        
        const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/messages/${messageId}`;
        const accessToken = await oAuth2Client.getAccessToken();
        if (!accessToken) {
            throw new Error("Access token is null or undefined");
        }
        const token = accessToken.token as string;
        const config: AxiosRequestConfig = createConfig(url, token);
        const response: AxiosResponse = await axios(config);

        const data = response.data;
        res.json(data);
    }
    catch (error) {
        console.log(error);
        res.send(error);
    }
}

async function getMails(req: Request, res: Response): Promise<void> {
    try {
        const email = req.params.email as string;
        if (!email) {
            throw new Error("Email address is missing");
        }
        
        const url = `https://gmail.googleapis.com/gmail/v1/users/${email}/threads?maxResults=100`;
        const accessToken = await oAuth2Client.getAccessToken();
        if (!accessToken) {
            throw new Error("Access token is null or undefined");
        }
        const token = accessToken.token as string;
        const config: AxiosRequestConfig = createConfig(url, token);
        const response: AxiosResponse = await axios(config);
        res.json(response.data);
    }
    catch (error) {
        console.log(error);
        res.send(error);
    }
}



gmailRouter.get("/mail/user/:email", (req: Request, res: Response) =>
  controllers.getUser(req, res)
);

gmailRouter.get("/mail/read/:email/:messageId", (req: Request, res: Response) =>
  controllers.readMail(req, res)
);

gmailRouter.get("/mail/list/:email", (req: Request, res: Response) =>
  controllers.getMails(req, res)
);